############################
#  SHARED

broker-register-params: &broker-register-params
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))
  BROKER_NAME: ((name))
  AUTH_USER: ((broker-auth-username))
  AUTH_PASS: ((broker-auth-password))
  SERVICES: ((visible-services))

cf-creds-dev: &cf-creds-dev
  CF_API_URL: ((dev-cf-api-url))
  CF_USERNAME: ((dev-cf-username))
  CF_PASSWORD: ((dev-cf-password))
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))

cf-creds-staging: &cf-creds-staging
  CF_API_URL: ((staging-cf-api-url))
  CF_USERNAME: ((staging-cf-username))
  CF_PASSWORD: ((staging-cf-password))
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))

cf-creds-production: &cf-creds-production
  CF_API_URL: ((production-cf-api-url))
  CF_USERNAME: ((production-cf-username))
  CF_PASSWORD: ((production-cf-password))
  CF_ORGANIZATION: ((broker-organization))
  CF_SPACE: ((broker-space))

create-postgres-service-params: &create-postgres-service-params
  APP_NAME: ((name))
  SVC_SERVICE: ((db_service))
  SVC_PLAN: ((db_plan))
  SVC_NAME: ((db_name))

create-redis-service-params: &create-redis-service-params
  APP_NAME: ((name))
  SVC_SERVICE: ((redis_service))
  SVC_PLAN: ((redis_plan))
  SVC_NAME: ((redis_name))

upgrade-schema-vars: &upgrade-schema-vars
  FLASK_ENV: upgrade-schema
  APP_NAME: ((name))-db-upgrade
  DB_NAME: ((db_name))
  REDIS_NAME: ((redis_name))

cf-manifest-vars: &cf-manifest-vars
  vars:
    APP_NAME: ((name))
    DB_NAME: ((db_name))
    REDIS_NAME: ((redis_name))

cf-manifest-env-dev: &cf-manifest-env-dev
  environment_variables:
    FLASK_ENV: development
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((dev-db-encryption-key))
    ROUTE53_ZONE_ID: ((dev-route53-zone-id))
    DNS_ROOT_DOMAIN: ((dev-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((dev-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((dev-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((dev-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((dev-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((dev-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((dev-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((dev-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((dev-alb-listener-arns))
    SMTP_PASS: ((smtp-pass))
    SMTP_HOST: ((smtp-host))
    SMTP_USER: ((smtp-user))
    SMTP_FROM: ((smtp-from))
    SMTP_PORT: ((smtp-port))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((dev-log-bucket))

cf-manifest-env-staging: &cf-manifest-env-staging
  environment_variables:
    FLASK_ENV: staging
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((staging-db-encryption-key))
    ROUTE53_ZONE_ID: ((staging-route53-zone-id))
    DNS_ROOT_DOMAIN: ((staging-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((staging-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((staging-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((staging-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((staging-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((staging-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((staging-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((staging-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((staging-alb-listener-arns))
    SMTP_PASS: ((smtp-pass))
    SMTP_HOST: ((smtp-host))
    SMTP_USER: ((smtp-user))
    SMTP_FROM: ((smtp-from))
    SMTP_PORT: ((smtp-port))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((staging-log-bucket))

cf-manifest-env-production: &cf-manifest-env-production
  environment_variables:
    FLASK_ENV: production
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((production-db-encryption-key))
    ROUTE53_ZONE_ID: ((production-route53-zone-id))
    DNS_ROOT_DOMAIN: ((production-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((production-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((production-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((production-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((production-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((production-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((production-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((production-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((production-alb-listener-arns))
    SMTP_PASS: ((smtp-pass))
    SMTP_HOST: ((smtp-host))
    SMTP_USER: ((smtp-user))
    SMTP_FROM: ((smtp-from))
    SMTP_PORT: ((smtp-port))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((production-log-bucket))

cf-manifest-env-easta: &cf-manifest-env-easta
  environment_variables:
    FLASK_ENV: production
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((easta-db-encryption-key))
    ROUTE53_ZONE_ID: ((easta-route53-zone-id))
    DNS_ROOT_DOMAIN: ((easta-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((easta-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((easta-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((easta-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((easta-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((easta-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((easta-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((easta-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((easta-alb-listener-arns))
    SMTP_PASS: ((smtp-pass-east))
    SMTP_HOST: ((smtp-host-east))
    SMTP_USER: ((smtp-user-east))
    SMTP_FROM: ((smtp-from-east))
    SMTP_PORT: ((smtp-port-east))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((easta-log-bucket))

cf-manifest-env-eastb: &cf-manifest-env-eastb
  environment_variables:
    FLASK_ENV: production
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((eastb-db-encryption-key))
    ROUTE53_ZONE_ID: ((eastb-route53-zone-id))
    DNS_ROOT_DOMAIN: ((eastb-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((eastb-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((eastb-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((eastb-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((eastb-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((eastb-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((eastb-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((eastb-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((eastb-alb-listener-arns))
    SMTP_PASS: ((smtp-pass-east))
    SMTP_HOST: ((smtp-host-east))
    SMTP_USER: ((smtp-user-east))
    SMTP_FROM: ((smtp-from-east))
    SMTP_PORT: ((smtp-port-east))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((eastb-log-bucket))

cf-manifest-env-westb: &cf-manifest-env-westb
  environment_variables:
    FLASK_ENV: production
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((westb-db-encryption-key))
    ROUTE53_ZONE_ID: ((westb-route53-zone-id))
    DNS_ROOT_DOMAIN: ((westb-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((westb-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((westb-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((westb-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((westb-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((westb-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((westb-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((westb-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((westb-alb-listener-arns))
    SMTP_PASS: ((smtp-pass))
    SMTP_HOST: ((smtp-host))
    SMTP_USER: ((smtp-user))
    SMTP_FROM: ((smtp-from))
    SMTP_PORT: ((smtp-port))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((westb-log-bucket))

cf-manifest-env-westc: &cf-manifest-env-westc
  environment_variables:
    FLASK_ENV: production
    BROKER_USERNAME: ((broker-auth-username))
    BROKER_PASSWORD: ((broker-auth-password))
    SECRET_KEY: ((flask-secret-key))
    DATABASE_ENCRYPTION_KEY: ((westc-db-encryption-key))
    ROUTE53_ZONE_ID: ((westc-route53-zone-id))
    DNS_ROOT_DOMAIN: ((westc-dns-root-domain))
    DEFAULT_CLOUDFRONT_ORIGIN: ((westc-default-cloudfront-origin-domain-name))
    AWS_GOVCLOUD_REGION: ((westc-aws-govcloud-region))
    AWS_GOVCLOUD_SECRET_ACCESS_KEY: ((westc-aws-govcloud-secret-access-key))
    AWS_GOVCLOUD_ACCESS_KEY_ID: ((westc-aws-govcloud-access-key-id))
    AWS_COMMERCIAL_REGION: ((westc-aws-commercial-region))
    AWS_COMMERCIAL_SECRET_ACCESS_KEY: ((westc-aws-commercial-secret-access-key))
    AWS_COMMERCIAL_ACCESS_KEY_ID: ((westc-aws-commercial-access-key-id))
    ALB_LISTENER_ARNS: ((westc-alb-listener-arns))
    SMTP_PASS: ((smtp-pass))
    SMTP_HOST: ((smtp-host))
    SMTP_USER: ((smtp-user))
    SMTP_FROM: ((smtp-from))
    SMTP_PORT: ((smtp-port))
    SMTP_TO: ((smtp-to))
    SMTP_CERT: ((smtp-cert))
    CDN_LOG_BUCKET: ((westc-log-bucket))

acceptance-tests-params-staging-alb: &acceptance-tests-params-staging-alb
  PLAN_NAME: "domain"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((staging-dns-root-domain))
  HOSTED_ZONE_ID_0: ((staging-test-hosted-zone-id-2))
  TEST_DOMAIN_0: ((staging-test-domain-2))
  HOSTED_ZONE_ID_1: ((staging-test-hosted-zone-id-3))
  TEST_DOMAIN_1: ((staging-test-domain-3))
  AWS_ACCESS_KEY_ID: ((staging-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((staging-test-user-aws-secret-access-key))
  AWS_REGION: ((staging-aws-commercial-region))

acceptance-tests-params-staging-cdn: &acceptance-tests-params-staging-cdn
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((staging-dns-root-domain))
  HOSTED_ZONE_ID_0: ((staging-test-hosted-zone-id-0))
  TEST_DOMAIN_0: ((staging-test-domain-0))
  HOSTED_ZONE_ID_1: ((staging-test-hosted-zone-id-1))
  TEST_DOMAIN_1: ((staging-test-domain-1))
  AWS_ACCESS_KEY_ID: ((staging-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((staging-test-user-aws-secret-access-key))
  AWS_REGION: ((staging-aws-commercial-region))

acceptance-tests-params-production-cdn: &acceptance-tests-params-production-cdn
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((production-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((production-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((production-test-user-aws-secret-access-key))
  AWS_REGION: ((production-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((production-test-hosted-zone-id-0))
  TEST_DOMAIN_0: ((production-test-domain-0))
  HOSTED_ZONE_ID_1: ((production-test-hosted-zone-id-1))
  TEST_DOMAIN_1: ((production-test-domain-1))

acceptance-tests-params-production-alb: &acceptance-tests-params-production-alb
  PLAN_NAME: "domain"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((production-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((production-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((production-test-user-aws-secret-access-key))
  AWS_REGION: ((production-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((production-test-hosted-zone-id-2))
  TEST_DOMAIN_0: ((production-test-domain-2))
  HOSTED_ZONE_ID_1: ((production-test-hosted-zone-id-3))
  TEST_DOMAIN_1: ((production-test-domain-3))

acceptance-tests-params-easta-cdn: &acceptance-tests-params-easta-cdn
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((easta-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((easta-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((easta-test-user-aws-secret-access-key))
  AWS_REGION: ((easta-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((easta-test-hosted-zone-id-0))
  TEST_DOMAIN_0: ((easta-test-domain-0))
  HOSTED_ZONE_ID_1: ((easta-test-hosted-zone-id-1))
  TEST_DOMAIN_1: ((easta-test-domain-1))

acceptance-tests-params-easta-alb: &acceptance-tests-params-easta-alb
  PLAN_NAME: "domain"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((easta-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((easta-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((easta-test-user-aws-secret-access-key))
  AWS_REGION: ((easta-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((easta-test-hosted-zone-id-2))
  TEST_DOMAIN_0: ((easta-test-domain-2))
  HOSTED_ZONE_ID_1: ((easta-test-hosted-zone-id-3))
  TEST_DOMAIN_1: ((easta-test-domain-3))

acceptance-tests-params-eastb-cdn: &acceptance-tests-params-eastb-cdn
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((eastb-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((eastb-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((eastb-test-user-aws-secret-access-key))
  AWS_REGION: ((eastb-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((eastb-test-hosted-zone-id-0))
  TEST_DOMAIN_0: ((eastb-test-domain-0))
  HOSTED_ZONE_ID_1: ((eastb-test-hosted-zone-id-1))
  TEST_DOMAIN_1: ((eastb-test-domain-1))

acceptance-tests-params-eastb-alb: &acceptance-tests-params-eastb-alb
  PLAN_NAME: "domain"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((eastb-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((eastb-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((eastb-test-user-aws-secret-access-key))
  AWS_REGION: ((eastb-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((eastb-test-hosted-zone-id-2))
  TEST_DOMAIN_0: ((eastb-test-domain-2))
  HOSTED_ZONE_ID_1: ((eastb-test-hosted-zone-id-3))
  TEST_DOMAIN_1: ((eastb-test-domain-3))

acceptance-tests-params-westb-cdn: &acceptance-tests-params-westb-cdn
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((westb-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((westb-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((westb-test-user-aws-secret-access-key))
  AWS_REGION: ((westb-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((westb-test-hosted-zone-id-0))
  TEST_DOMAIN_0: ((westb-test-domain-0))
  HOSTED_ZONE_ID_1: ((westb-test-hosted-zone-id-1))
  TEST_DOMAIN_1: ((westb-test-domain-1))

acceptance-tests-params-westb-alb: &acceptance-tests-params-westb-alb
  PLAN_NAME: "domain"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((westb-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((westb-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((westb-test-user-aws-secret-access-key))
  AWS_REGION: ((westb-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((westb-test-hosted-zone-id-2))
  TEST_DOMAIN_0: ((westb-test-domain-2))
  HOSTED_ZONE_ID_1: ((westb-test-hosted-zone-id-3))
  TEST_DOMAIN_1: ((westb-test-domain-3))

acceptance-tests-params-westc-cdn: &acceptance-tests-params-westc-cdn
  PLAN_NAME: "domain-with-cdn"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((westc-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((westc-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((westc-test-user-aws-secret-access-key))
  AWS_REGION: ((westc-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((westc-test-hosted-zone-id-0))
  TEST_DOMAIN_0: ((westc-test-domain-0))
  HOSTED_ZONE_ID_1: ((westc-test-hosted-zone-id-1))
  TEST_DOMAIN_1: ((westc-test-domain-1))

acceptance-tests-params-westc-alb: &acceptance-tests-params-westc-alb
  PLAN_NAME: "domain"
  SERVICE_NAME: "external-domain"
  DNS_ROOT_DOMAIN: ((westc-dns-root-domain))
  AWS_ACCESS_KEY_ID: ((westc-test-user-aws-access-key-id))
  AWS_SECRET_ACCESS_KEY: ((westc-test-user-aws-secret-access-key))
  AWS_REGION: ((westc-aws-commercial-region))
  HOSTED_ZONE_ID_0: ((westc-test-hosted-zone-id-2))
  TEST_DOMAIN_0: ((westc-test-domain-2))
  HOSTED_ZONE_ID_1: ((westc-test-hosted-zone-id-3))
  TEST_DOMAIN_1: ((westc-test-domain-3))

############################
#  JOBS

jobs:

- name: reconfigure
  serial: true
  plan:
  - get: src
    params: {depth: 1}
    trigger: true
  - get: secrets
    # Remember to manually trigger a new build if you upload a new version
    # of the credentials file.
    trigger: false
  - set_pipeline: ((name))
    file: src/ci/pipeline.yml
    var_files:
    - secrets/((name)).yml

- name: test
  plan:
  - get: src
    params: {depth: 1}
    trigger: true
    passed: [reconfigure]

  - put: dev-docker-image
    # We push this docker image _only_ so that we can use it in the next task
    # below.  :shrug: concourse.
    params:
      build: src
      dockerfile: src/docker/Dockerfile.dev
      tag_as_latest: true
      cache: true

  - task: test
    # Run the tests using the image pushed above.
    image: dev-docker-image
    config:
      platform: linux
      params:
        TMPDIR: /tmp
      run:
        path: /app/docker/tests

- name: dev
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [test]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-dev
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-dev
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-dev
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((dev-db-encryption-key))
      <<: *cf-creds-dev
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-dev
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-dev
    - put: cf-dev
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-dev
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-dev
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: staging
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [dev]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-staging
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-staging
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-staging
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((staging-db-encryption-key))
      <<: *cf-creds-staging
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-staging
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-staging
    - put: cf-staging
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-staging
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-staging
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: staging-acceptance-tests
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [staging]
    - get: cf-staging
      trigger: true
      passed: [staging]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - in_parallel:
    - task: acceptance-cdn
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-staging
          <<: *acceptance-tests-params-staging-cdn
        run:
          path: /app/acceptance/run.sh
    - task: acceptance-alb
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-staging
          <<: *acceptance-tests-params-staging-alb
        run:
          path: /app/acceptance/run.sh
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance tests for external-domain-broker FAILED in staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance tests for external-domain-broker PASSED in staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: production
  serial_groups: [production]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [staging-acceptance-tests]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-production
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-production
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-production
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((production-db-encryption-key))
      <<: *cf-creds-production
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-production
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-production
    - put: cf-production
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-production
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-production
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: production-acceptance-tests
  serial_groups: [production]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [production]
    - get: cf-production
      trigger: true
      passed: [production]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - in_parallel:
    - task: acceptance-cdn
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-production
          <<: *acceptance-tests-params-production-cdn
        run:
          path: /app/acceptance/run.sh
    - task: acceptance-alb
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-production
          <<: *acceptance-tests-params-production-alb
        run:
          path: /app/acceptance/run.sh
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance tests for external-domain-broker FAILED in production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance tests for external-domain-broker PASSED in production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: easta
  serial_groups: [easta]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [staging-acceptance-tests]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-easta
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-easta
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-easta
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((easta-db-encryption-key))
      <<: *cf-creds-easta
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-easta
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-easta
    - put: cf-easta
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-easta
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-easta
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on easta
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on easta
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: easta-acceptance-tests
  serial_groups: [easta]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [easta]
    - get: cf-easta
      trigger: true
      passed: [easta]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - in_parallel:
    - task: acceptance-cdn
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-easta
          <<: *acceptance-tests-params-easta-cdn
        run:
          path: /app/acceptance/run.sh
    - task: acceptance-alb
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-easta
          <<: *acceptance-tests-params-easta-alb
        run:
          path: /app/acceptance/run.sh
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance tests for external-domain-broker FAILED in easta
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance tests for external-domain-broker PASSED in easta
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: eastb
  serial_groups: [eastb]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [staging-acceptance-tests]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-eastb
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-eastb
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-eastb
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((eastb-db-encryption-key))
      <<: *cf-creds-eastb
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-eastb
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-eastb
    - put: cf-eastb
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-eastb
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-eastb
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on eastb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on eastb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: eastb-acceptance-tests
  serial_groups: [eastb]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [eastb]
    - get: cf-eastb
      trigger: true
      passed: [eastb]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - in_parallel:
    - task: acceptance-cdn
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-eastb
          <<: *acceptance-tests-params-eastb-cdn
        run:
          path: /app/acceptance/run.sh
    - task: acceptance-alb
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-eastb
          <<: *acceptance-tests-params-eastb-alb
        run:
          path: /app/acceptance/run.sh
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance tests for external-domain-broker FAILED in eastb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance tests for external-domain-broker PASSED in eastb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: westb
  serial_groups: [westb]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [staging-acceptance-tests]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-westb
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-westb
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-westb
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((westb-db-encryption-key))
      <<: *cf-creds-westb
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-westb
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-westb
    - put: cf-westb
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-westb
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-westb
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on westb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on westb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: westb-acceptance-tests
  serial_groups: [westb]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [westb]
    - get: cf-westb
      trigger: true
      passed: [westb]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - in_parallel:
    - task: acceptance-cdn
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-westb
          <<: *acceptance-tests-params-westb-cdn
        run:
          path: /app/acceptance/run.sh
    - task: acceptance-alb
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-westb
          <<: *acceptance-tests-params-westb-alb
        run:
          path: /app/acceptance/run.sh
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance tests for external-domain-broker FAILED in westb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance tests for external-domain-broker PASSED in westb
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: westc
  serial_groups: [westc]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      trigger: true
      passed: [staging-acceptance-tests]
    - get: pipeline-tasks
  - in_parallel:
    - task: create-postgres
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-westc
        <<: *create-postgres-service-params
    - task: create-redis
      file: pipeline-tasks/ensure-misbehaved-service.yml
      params:
        <<: *cf-creds-westc
        <<: *create-redis-service-params
  - task: stop-apps
    file: src/ci/stop-apps.yml
    params:
      <<: *cf-creds-westc
      APPLICATIONS: "((name))-workers"
  - task: upgrade-schema
    file: src/ci/upgrade-schema.yml
    params:
      DATABASE_ENCRYPTION_KEY: ((westc-db-encryption-key))
      <<: *cf-creds-westc
      <<: *upgrade-schema-vars
  - in_parallel:
    - put: cf-westc
      params:
        path: src
        manifest: src/manifests/app.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-westc
    - put: cf-westc
      params:
        path: src
        manifest: src/manifests/workers.yml
        show_app_log: true
        <<: *cf-manifest-vars
        <<: *cf-manifest-env-westc
  - task: register-broker
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-creds-westc
      <<: *broker-register-params
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy external-domain-broker on westc
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed external-domain-broker on westc
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: westc-acceptance-tests
  serial_groups: [westc]
  plan:
  - in_parallel:
    - get: src
      params: {depth: 1}
      passed: [westc]
    - get: cf-westc
      trigger: true
      passed: [westc]
    - get: dev-docker-image
    - get: test-timer
      trigger: true
  - in_parallel:
    - task: acceptance-cdn
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-westc
          <<: *acceptance-tests-params-westc-cdn
        run:
          path: /app/acceptance/run.sh
    - task: acceptance-alb
      image: dev-docker-image
      timeout: 6h
      config:
        platform: linux
        params:
          <<: *cf-creds-westc
          <<: *acceptance-tests-params-westc-alb
        run:
          path: /app/acceptance/run.sh
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance tests for external-domain-broker FAILED in westc
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance tests for external-domain-broker PASSED in westc
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

############################
#  RESOURCES

resources:

- name: secrets
  type: s3-iam
  icon: cloud-lock
  source:
    region_name: ((concourse-varz-bucket-region))
    bucket: ((concourse-varz-bucket))
    versioned_file: ((name)).yml

- name: src
  type: git
  icon: github-circle
  check_every: 10s
  source:
    uri: https://github.com/cloud-gov/((name))
    branch: ((git-branch))

- name: dev-docker-image
  type: docker-image
  icon: docker
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-image-dev))

- name: cf-dev
  type: cf
  icon: cloud-upload
  source:
    api: ((dev-cf-api-url))
    username: ((dev-cf-username))
    password: ((dev-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-staging
  type: cf
  icon: cloud-upload
  source:
    api: ((staging-cf-api-url))
    username: ((staging-cf-username))
    password: ((staging-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-production
  type: cf
  icon: cloud-upload
  source:
    api: ((production-cf-api-url))
    username: ((production-cf-username))
    password: ((production-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-easta
  type: cf
  icon: cloud-upload
  source:
    api: ((easta-cf-api-url))
    username: ((easta-cf-username))
    password: ((easta-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-eastb
  type: cf
  icon: cloud-upload
  source:
    api: ((eastb-cf-api-url))
    username: ((eastb-cf-username))
    password: ((eastb-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-westb
  type: cf
  icon: cloud-upload
  source:
    api: ((westb-cf-api-url))
    username: ((westb-cf-username))
    password: ((westb-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: cf-westc
  type: cf
  icon: cloud-upload
  source:
    api: ((westc-cf-api-url))
    username: ((westc-cf-username))
    password: ((westc-cf-password))
    organization: ((broker-organization))
    space: ((broker-space))

- name: pipeline-tasks
  type: git
  icon: github-circle
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: test-timer
  type: time
  source:
    start: 8:00 AM
    stop: 8:00 PM
    timezone: America/New_York
    days:
      - Monday
      - Tuesday
      - Wednesday
      - Thursday
      - Friday

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

############################
#  RESOURCE TYPES

resource_types:

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
